/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdminRole;

import Business.Building.Building;
import Business.Enterprise.ComplexEnterprise;
import Business.Enterprise.Enterprise;
import Business.Building.Sensor;
import Business.Building.SensorDirectory;
import Business.Building.SensorDirectory.SensorType;
import Business.Network.Network;
import Business.Organization.BuildingOrganization;
import Business.Organization.Organization;
import Business.Validator;
import com.lowagie.text.pdf.AcroFields.Item;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminRole.*;

/**
 *
 * @author vishakha
 */
public class ManageSensorsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ComplexEnterprise buildingEnterprise;
    private BuildingOrganization buildingOrganization;
    public ManageSensorsJPanel(JPanel userProcessContainer,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.buildingEnterprise=(ComplexEnterprise)enterprise;
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof BuildingOrganization)
            {
                buildingOrganization=(BuildingOrganization)org;
            }
        }
        txtpsiValue.setVisible(false);
        lblpsivalue.setVisible(false);
        populateBuildingComboBox();
        //populateSensorTable();
        populateSensorTypeCombobox();
        
    }

    public void populateBuildingComboBox()
    {
        buildingComboBox.removeAllItems();
 
            for(Building building:buildingOrganization.getBuildingDirectory().getBuildingList())
            {    
                buildingComboBox.addItem(building);
            }
            
        
    }
    public void populateSensorTable(Building building)
    {
        DefaultTableModel model = (DefaultTableModel)tblSensors.getModel();

        model.setRowCount(0);
        for (Sensor sensor : building.getSensorDirectory().getSensorList()) {
                Object[] row = new Object[4];
                row[0] = sensor.getSensorId();
                row[1] = sensor.getLocation();
                row[2] = sensor.getSensorType();
                row[3] = building;
                model.addRow(row);
        }
    }
    
    public void populateSensorLocationCombobox(SensorType type,Building building)
    {
        SensorLocationCombobox.removeAllItems();
        
        if(type.equals(SensorType.Pressure))
        {
            txtpsiValue.setVisible(true);
            lblpsivalue.setVisible(true);
            for(String location:building.getSensorDirectory().getSensorLocation())
            if(location.contains("#"))        
            SensorLocationCombobox.addItem(location);
        }
        if(type.equals(SensorType.Quantity))
        {
            for(String location:building.getSensorDirectory().getSensorLocation())
            if(location.contains("Quantity"))    
            SensorLocationCombobox.addItem(location);
            txtpsiValue.setVisible(true);
            lblpsivalue.setVisible(true);
        }
        if(type.equals(SensorType.PH))
        {
            for(String location:building.getSensorDirectory().getSensorLocation())
            if((location.contains("Top")||location.contains("Base")) && !location.contains("Quantity"))  
            SensorLocationCombobox.addItem(location);
            txtpsiValue.setVisible(false);
            lblpsivalue.setVisible(false);
            
        }
    }
    public void populateSensorTypeCombobox()
    {
        SensorTypeComboBox.removeAllItems();
        for(SensorType type:SensorDirectory.SensorType.values())
            SensorTypeComboBox.addItem(type);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        SensorTypeComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSensors = new javax.swing.JTable();
        lblpsivalue = new javax.swing.JLabel();
        txtpsiValue = new javax.swing.JTextField();
        btnViewMap = new javax.swing.JButton();
        SensorLocationCombobox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        buildingComboBox = new javax.swing.JComboBox();

        jLabel2.setText("Sensor Type");

        SensorTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SensorTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SensorTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Manage Sensors");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel5.setText("Sensor Location");

        tblSensors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SensorID", "Sensor Location", "Sensor Type", "Building Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSensors);

        lblpsivalue.setText("Expected Value");

        txtpsiValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpsiValueActionPerformed(evt);
            }
        });

        btnViewMap.setText("View Map");
        btnViewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMapActionPerformed(evt);
            }
        });

        SensorLocationCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Building");

        buildingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        buildingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(btnBack)
                                    .addComponent(lblpsivalue))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(btnCreate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnViewMap))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtpsiValue, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SensorLocationCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buildingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(262, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buildingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(SensorLocationCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblpsivalue)
                    .addComponent(txtpsiValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnCreate)
                    .addComponent(btnViewMap))
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        Building building=(Building)buildingComboBox.getSelectedItem();
        String sensortype=SensorTypeComboBox.getSelectedItem().toString();
        String location=SensorLocationCombobox.getSelectedItem().toString();
        Validator validator=new Validator();
        if(sensortype==null || location==null)
            JOptionPane.showMessageDialog(null,"Invalid Input!");
        
        Sensor check=building.getSensorDirectory().checkIfExist(sensortype,location);
        if(check!=null)
        {
            JOptionPane.showMessageDialog(null,"Sensor already exists!");
            return;
        }
        else
        {    
       
        if(sensortype.equals(SensorType.Pressure.getValue()))
        {  
            boolean checkPsi=validator.validateNumber(txtpsiValue.getText());
            
            if(sensortype==null || location==null || txtpsiValue.getText()==null || (checkPsi==false))
            {JOptionPane.showMessageDialog(null,"Invalid Input!");
            }
            else
            {
            int psiValue=Integer.parseInt(txtpsiValue.getText());    
            if(psiValue>38 && psiValue<100)
            {
                Sensor s=building.getSensorDirectory().createSensor();
                s.setSensorType(sensortype);
                s.setLocation(location);
                s.setSensorValue(psiValue);
                populateSensorTable(building);    
            //JOptionPane.showMessageDialog(null,"Sensor created successfully");
            }
            else
            {
            JOptionPane.showMessageDialog(null,"Pressure should not exceed 100psi and should not be less than 39psi.");

            }
            } 
            txtpsiValue.setText("");
            txtpsiValue.grabFocus();
        }
        
        if(sensortype.equals(SensorType.Quantity.getValue()))
        {
            boolean checkPsi=validator.validateNumber(txtpsiValue.getText());
            if(sensortype==null || location==null || txtpsiValue.getText()==null || (checkPsi==false))
            {JOptionPane.showMessageDialog(null,"Invalid Input!");
            }
            else
            {
            int psiValue=Integer.parseInt(txtpsiValue.getText());    
            if(psiValue>0 && psiValue<121)
            {
                Sensor s=building.getSensorDirectory().createSensor();
                s.setSensorType(sensortype);
                s.setLocation(location);
                s.setSensorValue(psiValue);
                populateSensorTable(building);  
            JOptionPane.showMessageDialog(null,"Sensor created successfully");
            populateSensorTable(building);    
            }
            else
            {
            JOptionPane.showMessageDialog(null,"Quantity should not exceed 121 cu.m");

            }
            }
            txtpsiValue.setText("");
            txtpsiValue.grabFocus();
        }
        if(sensortype.equals(SensorType.PH.getValue()))
        {
                Sensor s=building.getSensorDirectory().createSensor();
                s.setSensorType(sensortype);
                s.setLocation(location);
                //s.setSensorValue(psiValue);
                populateSensorTable(building);  
        }    
         
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void txtpsiValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpsiValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpsiValueActionPerformed

    private void SensorTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SensorTypeComboBoxActionPerformed
           Building building=(Building)buildingComboBox.getSelectedItem();
           SensorType type=(SensorType)SensorTypeComboBox.getSelectedItem();
        if(type!=null && building!=null)
        {
                    populateSensorLocationCombobox(type,building);
        }

    }//GEN-LAST:event_SensorTypeComboBoxActionPerformed

    private void btnViewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMapActionPerformed
        int []x={0,0};
        SensorsMapJPanel sensorsMapJPanel=new SensorsMapJPanel(userProcessContainer,x);
        userProcessContainer.add("sensorsMapJPanel",sensorsMapJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
       

    }//GEN-LAST:event_btnViewMapActionPerformed

    private void buildingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingComboBoxActionPerformed
       Building building=(Building)buildingComboBox.getSelectedItem();
       if(building!=null)
           populateSensorTable(building);
    }//GEN-LAST:event_buildingComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox SensorLocationCombobox;
    private javax.swing.JComboBox SensorTypeComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnViewMap;
    private javax.swing.JComboBox buildingComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblpsivalue;
    private javax.swing.JTable tblSensors;
    private javax.swing.JTextField txtpsiValue;
    // End of variables declaration//GEN-END:variables
}
